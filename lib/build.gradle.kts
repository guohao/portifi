/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    kotlin("jvm")
    kotlin("plugin.serialization") version "1.8.21"
    signing
    `java-library`
    `maven-publish`
}
group = "io.github.guohao"
version = "0.0.2-SNAPSHOT"

dependencies {
    api(platform("org.jetbrains.kotlin:kotlin-bom"))

    api("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    api("org.slf4j:slf4j-api:2.0.7")
    api("io.netty:netty-all:4.1.91.Final")
    api("org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.0")
    testImplementation(kotlin("test"))
}

tasks.test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

publishing {

    publications {
        register<MavenPublication>("mavenJava") {
            from(components["java"])
            groupId = "io.github.guohao"
            version = "0.0.2-SNAPSHOT"
            artifactId = "portifi"
            pom {
                name.set("$groupId:$artifactId")
                description.set("A powerful reversed gateway")
                url.set("https://github.com/guohao/portifi/")
                licenses {
                    license {
                        name.set("The Apache License, Version 2.0")
                        url.set("https://www.apache.org/licenses/LICENSE-2.0.txt")
                    }
                }
                developers {
                    developer {
                        id.set("guohao")
                        name.set("Hao Guo")
                        email.set("guohaoice@gmail.com")
                    }
                }
                scm {
                    connection.set("scm:git:git://github.com/guohao/portifi.git")
                    developerConnection.set("scm:git:ssh://github.com/guohao/portifi.git")
                    url.set("https://github.com/guohao/portifi/tree/main")
                }
            }
        }
    }
    repositories {
        maven {
            name = "mavenCentral"
            val releasesRepoUrl = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            val snapshotsRepoUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            url = if (!version.toString().endsWith("SNAPSHOT")) releasesRepoUrl else snapshotsRepoUrl
            credentials {
                username = project.findProperty("ossrhUsername") as String? ?: System.getenv("USERNAME")
                password = project.findProperty("ossrhPassword") as String? ?: System.getenv("TOKEN")
            }
        }
    }
}
signing {
    sign(publishing.publications["mavenJava"])
}
tasks.javadoc {
    if (JavaVersion.current().isJava9Compatible) {
        (options as StandardJavadocDocletOptions).addBooleanOption("html5", true)
    }
}
